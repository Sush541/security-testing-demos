name: Automated Secret Detection Demo

on:
  workflow_dispatch:

jobs:
  add_secret:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Add dummy secret
        run: |
          echo 'AWS_SECRET_ACCESS_KEY=AKIA123FAKEDEMO123456' >> demo_secret.txt
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          git add demo_secret.txt
          git commit -m "Add dummy AWS secret for demo"
          git push

  detect_leak:
    needs: add_secret
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Gitleaks scan
        uses: zricethezav/gitleaks-action@v2
        with:
          scan_args: detect --source . --report-format json --report-path gitleaks-report.json
        continue-on-error: true

      - name: Generate HTML report from Gitleaks JSON
        run: |
          cat > report.js << 'EOF'
          const fs = require('fs');
          let html = '<p>No leaks detected ✅</p>';
          if (fs.existsSync('gitleaks-report.json')) {
            const data = JSON.parse(fs.readFileSync('gitleaks-report.json', 'utf8'));
            if (Array.isArray(data) && data.length > 0) {
              html = '<table border=1><tr><th>File</th><th>Line</th><th>Secret</th><th>Rule</th></tr>';
              data.forEach(d => {
                html += `<tr><td>${d.file}</td><td>${d.line}</td><td>${d.secret}</td><td>${d.rule}</td></tr>`;
              });
              html += '</table>';
            }
          }
          fs.writeFileSync('gitleaks-report.html', html);
          EOF
          node report.js

      - id: read_html
        name: Read HTML report for email
        run: |
          REPORT=$(cat gitleaks-report.html)
          echo "html_body<<EOF" >> $GITHUB_OUTPUT
          echo "$REPORT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send email with scan results
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Gitleaks Scan Results (BEFORE REMEDIATION) for ${{ github.repository }}"
          to: ${{ secrets.TO_EMAIL }}
          from: ${{ secrets.FROM_EMAIL }}
          content_type: text/html
          body: ${{ steps.read_html.outputs.html_body }}

  remediate_secret:
    needs: detect_leak
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Remove dummy secret
        run: |
          sed -i '/AWS_SECRET_ACCESS_KEY/d' demo_secret.txt
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          git add demo_secret.txt
          git commit -m "Remove dummy AWS secret"
          git push

  detect_after_remediation:
    needs: remediate_secret
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Gitleaks scan
        uses: zricethezav/gitleaks-action@v2
        with:
          scan_args: detect --source . --report-format json --report-path gitleaks-report.json
        continue-on-error: true

      - name: Generate HTML report from Gitleaks JSON
        run: |
          cat > report.js << 'EOF'
          const fs = require('fs');
          let html = '<p>No leaks detected ✅</p>';
          if (fs.existsSync('gitleaks-report.json')) {
            const data = JSON.parse(fs.readFileSync('gitleaks-report.json', 'utf8'));
            if (Array.isArray(data) && data.length > 0) {
              html = '<table border=1><tr><th>File</th><th>Line</th><th>Secret</th><th>Rule</th></tr>';
              data.forEach(d => {
                html += `<tr><td>${d.file}</td><td>${d.line}</td><td>${d.secret}</td><td>${d.rule}</td></tr>`;
              });
              html += '</table>';
            }
          }
          fs.writeFileSync('gitleaks-report.html', html);
          EOF
          node report.js

      - id: read_html_after
        name: Read HTML report after remediation
        run: |
          REPORT=$(cat gitleaks-report.html)
          echo "html_body<<EOF" >> $GITHUB_OUTPUT
          echo "$REPORT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send email with scan results after remediation
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Gitleaks Scan Results (AFTER REMEDIATION) for ${{ github.repository }}"
          to: ${{ secrets.TO_EMAIL }}
          from: ${{ secrets.FROM_EMAIL }}
          content_type: text/html
          body: ${{ steps.read_html_after.outputs.html_body }}
